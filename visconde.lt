@title Basic literate tool in python

@s Introduction

This is a rough tool for simle literate programming, built along the lines 
of the CWEB program of (Knuth and Levy)[https://cs.stanford.edu/~knuth/lp.html], 
whose syntax follows that of (Literate)[https://github.com/zyedidia/Literate/]. 
We only implement a subset of these programs' functionality.

More precisely, this program is a minimal "tangler" which operates on a single
input file, under the restriction that any chunk `@{chunk name}` lies on a line 
of its own (in particular, no comments allowed in a line that references a chunk, 
and a chunk name cannot contain line breaks).

Here is the program outline

``` visconde.py
@{imports}

@{global definitions}

@{parse arguments}
@{process input file}
@{output tangled sources}
```

The line below should be updated whenever this program is changed.

``` global definitions
banner = "This is COB version 0.1."
```

@s Arguments


For now, the only argument to the program is the target file.

``` parse arguments
file = sys.argv[-1]
```

``` imports
import sys
```

``` global definitions
file = ""
```


@s Storing blocks

When tangling, we only care about code blocks, and all of these must be named.


``` process input file
print(banner) # Hi!

with open(file, 'r') as input_file:
    reading_code_block = False
    last_line_blank = False
    block_name = ''
    block_text = [] # list of lines
    for line_number, line in enumerate(input_file):
        @{read lines until code block; store `block_name` and set `reading_code_block`}
    
        # Now reading code block
        @{add line to `block_text` or complete and store block}
```

Every code block is preceeded by a blank line (i.e., a line with only whitespace).
The first line of a code block begins with three or more dashes (`---`), 
followed by the block name. The last line of a code block contains only dashes,
(as many as there were at the block's first line).

``` global definitions
dashes_regexp = re.compile('```+')
```

``` imports
import re
```

Note that each branch inside the first `if` statement below 
ends with `continue`, so we only proceed past the first if 
when `reading_code_block == True`.

``` read lines until code block; store `block_name` and set `reading_code_block`
if not reading_code_block:
    if line.strip() == "":
        last_line_blank = True
        continue
    elif last_line_blank:
        match_dashes = dashes_regexp.match(line) # at least 3 dashes
        if match_dashes:
            num_dashes = match_dashes.end()
            block_name = line[num_dashes:].strip()
            block_line = line_number
            block_text = []
            reading_code_block = True
        else:
            last_line_blank = False

    continue
```

We store the code of blocks in a dictionary `block`.
Each dictionary entry is a list of tuples `(line_num, code)`
containing 
- the line number of the first line of the chunk, and
- the code in the chunk.

``` add line to `block_text` or complete and store block
match_dashes = dashes_regexp.match(line) # at least 3 dashes
if match_dashes and match_dashes.end() == num_dashes:
    if block_name not in block:
        block[block_name] = []
    block[block_name] += [(block_line+1, block_text)]
    reading_code_block = False
    last_line_blank = False
else:
    block_text += [line]
```

``` global definitions
block = {}
```

@s From blocks to files

At this point, all code is loaded in the `block` dictionary.
If block `s` does not appear in the text of any other block, 
we will create a file whose contents will be `block[s]`,
with lines of the form `@{xxx}` replaced by the contents 
of the block `"xxx"`.

The first step is to identify which blocks are *roots*, 
that is, which blocks will be turned to files. 

``` output tangled sources
used_at = dict()

@{build list of `root_blocks`}

for blk in root_blocks:
    @{write `blk` to a file}
```

In order to locate 'root blocks', we use a dictionary `used_at`,
so (for instance) `used_at['global defintions']` is a list of
`block_name`s which contain `@{global definitions}` in their
text.

``` build list of `root_blocks`
for blk in block:
    if blk not in used_at:
        used_at[blk] = []
    for l,b in block[blk]:
        for chk in chunk_in_references(b):
            if chk not in used_at:
                used_at[chk] = [blk]
            else:
                used_at[chk] += [blk]

# expansion_order = [blk for blk, parents in sorted(used_at.items(), key=lambda t: len(t[1]),reverse=True)]
root_blocks = [blk for blk, parents in used_at.items() if len(parents) == 0]

```

``` global definitions
def chunk_in_references(block_text):
    references = []
    for line in block_text:
        line = line.strip() 
        # here we would remove comments in the line as well
        if is_chunk_line(line):
            references += [line[2:-1].strip()]

    return references
```

We finally handle writing each root block to a file.
The next lines to be output are stored in a buffer.
More precisely, `buffer[i]` is the next we'll output,
which we first expand (when it is a chunk reference).

``` write `blk` to a file
print("Writing file %s... " % blk,end='')
with open(blk, 'w') as output:
    buffer = [l for c in block[blk] for l in c[1]]
    i = 0
    while i < len(buffer):
        if is_chunk_line(buffer[i]):
            @{add contents of chunk to buffer}
        else:
            print(buffer[i], file=output, end='')
            i += 1
    
print("[ DONE ]")
```

``` add contents of chunk to buffer
the_chunk_name = chunk_line_name(buffer[i])
if the_chunk_name not in block:       # do we know what to insert in place of line?
    @{warn of missing chunk}
else:
    indentation = re.compile(' *').match(buffer[i]).end()
    indented_lines = [x for l,c in  block[the_chunk_name] for x in indent_code(indentation, c)]
    buffer = indented_lines + buffer[i+1:]
    i = 0
```

``` warn of missing chunk
print("! warning: missing text for chunk: %s" % the_chunk_name)
print(buffer[i], file=output, end='')
i += 1
```

``` global definitions
def is_chunk_line(l):
    aux = l.strip()
    return aux and (aux[0:2] == '@{' and aux[-1] == '}')

def chunk_line_name(line):
    return line.strip()[2:-1].strip()

def indent_code(indentation, code):
    return [' '*indentation + line for line in code]
```


